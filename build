#!/bin/sh

set -e

ARCH=""
DISK_SIZE=64
RAM_SIZE=512
CPU_COUNT=1
VERBOSE=false
CLEAN=false
BUILD_ONLY=false

usage() {
    cat << EOF
UNIX V11 Build System

Usage: $0 <arch|help> [options]

Architectures:
    AMD64    (alias: x86-64, x64)
    AArch64  (alias: Arm64)
    help     Show this help

Options:
    -disk <size> Disk size in MiB [default: 64 MiB]
    -ram <size>  RAM size in MiB [default: 512 MiB]
    -cpu <count> CPU count [default: 1]
    -norun       Build only, not running QEMU
    -clean       Clean before building
    -v           Verbose output

Examples:
    $0 amd64
    $0 aarch64 -ram 8192 -cpu 4
    $0 arm64 -norun
    $0 x86-64 -disk 524288 -clean

EOF
    exit 0
}

to_lower() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

if [ $# -eq 0 ]; then
    echo "Error: Architecture not specified"
    echo "Use '$0 help' for usage information"
    exit 1
fi

ARCH=`to_lower "$1"`
case $ARCH in
    help)
        usage
        ;;
    aarch64|arm64)
        EFI_TARGET="aarch64-unknown-uefi"
        KERNEL_TARGET="aarch64-unknown-none"
        EFI_BOOT_NAME="bootaa64.efi"
        QEMU_SYSTEM="qemu-system-aarch64"
        QEMU_CPU="cortex-a72"
        QEMU_MACHINE="virt,accel=tcg"
        EFI_CODE="firmwares/OVMF-AArch64-CODE.fd"
        EFI_VARS="firmwares/OVMF-AArch64-VARS.fd"
        ARCH_NAME="AArch64"
        DISK_ARCH="aarch64"
        ;;
    amd64|x86-64|x86_64|x64)
        EFI_TARGET="x86_64-unknown-uefi"
        KERNEL_TARGET="x86_64-unknown-none"
        EFI_BOOT_NAME="bootx64.efi"
        QEMU_SYSTEM="qemu-system-x86_64"
        QEMU_CPU="qemu64"
        QEMU_MACHINE="q35,accel=tcg"
        EFI_CODE="firmwares/OVMF-AMD64-CODE.fd"
        EFI_VARS="firmwares/OVMF-AMD64-VARS.fd"
        ARCH_NAME="AMD64"
        DISK_ARCH="amd64"
        ;;
    *)
        echo "Error: Unknown architecture: $ARCH"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac

if [ ! -f "$EFI_CODE" ] || [ ! -f "$EFI_VARS" ]; then
    mkdir -p firmwares
    unzip -q -o OVMF.zip -d firmwares
fi

shift

while [ $# -gt 0 ]; do
    case `to_lower "$1"` in
        -disk)
            if [ -z "$2" ] || [ "$(echo "$2" | cut -c1)" = "-" ]; then
                echo "Error: -disk requires a size argument"
                exit 1
            fi
            DISK_SIZE="$2"
            shift
            ;;
        -ram)
            if [ -z "$2" ] || [ "$(echo "$2" | cut -c1)" = "-" ]; then
                echo "Error: -ram requires a size argument"
                exit 1
            fi
            RAM_SIZE="$2"
            shift
            ;;
        -cpu)
            if [ -z "$2" ] || [ "$(echo "$2" | cut -c1)" = "-" ]; then
                echo "Error: -cpu requires a count argument"
                exit 1
            fi
            CPU_COUNT="$2"
            shift
            ;;
        -norun)
            BUILD_ONLY=true
            ;;
        -clean)
            CLEAN=true
            ;;
        -v)
            VERBOSE=true
            ;;
    esac

    shift
done

if [ "$CLEAN" = "true" ]; then
    if [ "$VERBOSE" = "true" ]; then
        cargo clean
    else
        cargo clean -q
    fi
    rm -rf dist
    rm -f unixv11-*.disk
fi

cd efi
if [ "$VERBOSE" = "true" ]; then
    cargo build -r    --target $EFI_TARGET
else
    cargo build -r -q --target $EFI_TARGET
fi
cd ..

cd kernel
if [ "$VERBOSE" = "true" ]; then
    cargo build -r    --target $KERNEL_TARGET
else
    cargo build -r -q --target $KERNEL_TARGET
fi
cd ..

mkdir -p dist/efi/boot

EFI_TARGET_DIR=$(echo "$EFI_TARGET" | sed 's/\.json$//' | sed 's/.*\///')
KERNEL_TARGET_DIR=$(echo "$KERNEL_TARGET" | sed 's/\.json$//' | sed 's/.*\///')

cp target/$EFI_TARGET_DIR/release/unix-v11-efi.efi dist/efi/boot/$EFI_BOOT_NAME
cp target/$KERNEL_TARGET_DIR/release/unix-v11-kernel dist/unix

DISK_NAME="unixv11-${DISK_ARCH}.disk"
dd if=/dev/zero of=$DISK_NAME bs=1M count=$DISK_SIZE status=none 2>/dev/null || \
dd if=/dev/zero of=$DISK_NAME bs=1m count=$DISK_SIZE status=none

if [ "`uname`" = "Darwin" ]; then
    diskno=`hdiutil attach -imagekey diskimage-class=CRawDiskImage -nomount $DISK_NAME | head -n 1 | awk '{print $1}'`
    diskutil eraseDisk FAT32 UNIXV11EFI GPTFormat $diskno > /dev/null
    cp -R dist/* /Volumes/UNIXV11EFI/
    hdiutil detach $diskno > /dev/null
else
    LOOP_DEV=`sudo losetup -f --show $DISK_NAME`
    sudo parted -s $LOOP_DEV mklabel gpt
    sudo parted -s $LOOP_DEV mkpart primary fat32 1MiB 100%
    sudo mkfs.vfat -n UNIXV11EFI ${LOOP_DEV}p1 > /dev/null

    MOUNT_DIR=`mktemp -d`
    sudo mount ${LOOP_DEV}p1 $MOUNT_DIR
    sudo cp -R dist/* $MOUNT_DIR/
    sudo umount $MOUNT_DIR
    rmdir $MOUNT_DIR
    sudo losetup -d $LOOP_DEV
fi

if [ "$BUILD_ONLY" = "true" ]; then
    echo "Disk ready: $DISK_NAME"
    exit 0
fi

$QEMU_SYSTEM \
    -cpu $QEMU_CPU \
    -machine $QEMU_MACHINE \
    -smp $CPU_COUNT \
    -drive if=pflash,file=$EFI_CODE,format=raw,readonly=on \
    -drive if=pflash,file=$EFI_VARS,format=raw \
    -drive file=$DISK_NAME,if=none,id=drv0,format=raw \
    -device nvme,drive=drv0,serial=unixv11nvme \
    -m ${RAM_SIZE}M \
    -serial stdio